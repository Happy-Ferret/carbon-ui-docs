{
  "../carbon-ui/src/components/AppBar.js": {
    "description": "The app bar, formerly known as the action bar in Android, is a special kind\nof toolbar thatâ€™s used for branding, navigation, search, and actions.\n\n    import React from 'react'\n    import { View } from 'react-native-universal'\n    import { AppBar } from 'carbon-ui'\n\n    const SimpleAppBarExample = () =>\n      <View>\n        <AppBar title=\"Kill bill\" />\n      </View>\n\n    export default SimpleAppBarExample",
    "methods": [],
    "props": {
      "title": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The title on the AppBar"
      },
      "leftIcon": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The material icon name of the left icon",
        "defaultValue": {
          "value": "'menu'",
          "computed": false
        }
      },
      "onLeftIconPress": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback for handling presses on the left icon"
      },
      "elevated": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Will make the AppBar flat and without shadows if false.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "children are inserted after the title"
      },
      "css": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": ""
      },
      "theme": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": ""
      }
    }
  },
  "../carbon-ui/src/components/DataTable/Cell.js": {
    "description": "",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": ""
      },
      "style": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "object"
            },
            {
              "name": "array"
            }
          ]
        },
        "required": false,
        "description": ""
      }
    }
  },
  "../carbon-ui/src/components/DataTable/HeaderCell.js": {
    "description": "",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": ""
      },
      "style": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "object"
            },
            {
              "name": "array"
            }
          ]
        },
        "required": false,
        "description": ""
      }
    }
  },
  "../carbon-ui/src/components/DataTable/HeaderRow.js": {
    "description": "",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "A collection of HeaderCells"
      },
      "style": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "object"
            },
            {
              "name": "array"
            }
          ]
        },
        "required": false,
        "description": ""
      }
    }
  },
  "../carbon-ui/src/components/DataTable/Row.js": {
    "description": "",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "A collection of Cells"
      },
      "style": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "object"
            },
            {
              "name": "array"
            }
          ]
        },
        "required": false,
        "description": ""
      }
    }
  },
  "../carbon-ui/src/components/DataTable/index.js": {
    "description": "Data tables display sets of raw data. They usually appear in desktop\nenterprise products.",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "The first child should be a HeaderRow, and the rest regular Rows."
      },
      "style": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "object"
            },
            {
              "name": "array"
            }
          ]
        },
        "required": false,
        "description": ""
      }
    }
  },
  "../carbon-ui/src/components/Dialog.js": {
    "description": "Dialogs inform users about a specific task and may contain critical\ninformation, require decisions, or involve multiple tasks.",
    "methods": [],
    "props": {
      "title": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The title of the dialog."
      },
      "actions": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The actions, can be an array (say, of FlatButtons) or a full element itself."
      },
      "active": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether or not the Dialog is active.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "The contents of the dialog"
      }
    }
  },
  "../carbon-ui/src/components/Divider.js": {
    "description": "A divider is a thin, lightweight rule that groups content in lists and page\nlayouts.",
    "methods": [],
    "props": {
      "color": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The color of the divider. It's derived from the theme by default."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": ""
      },
      "theme": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": ""
      }
    }
  },
  "../carbon-ui/src/components/Icon.js": {
    "description": "A system icon, or UI icon, symbolizes a command, file, device, or directory.\nSystem icons are also used to represent common actions like trash, print,\nand save.\n\nThe Icon's name maps to the material icons font.",
    "methods": [],
    "props": {
      "name": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "The name of the icon, from the material icons font."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": ""
      },
      "style": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "object"
            },
            {
              "name": "array"
            }
          ]
        },
        "required": false,
        "description": ""
      }
    }
  },
  "../carbon-ui/src/components/List.js": {
    "description": "Lists are best suited to presenting a homogeneous data type or sets of data\ntypes, such as images and text.",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Usually a collection of `ListItem`s"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": ""
      }
    }
  },
  "../carbon-ui/src/components/ListItem.js": {
    "description": "Individual items for the <List /> component.\n\nCan become a nested menu item it has ListItem for children.",
    "methods": [],
    "props": {
      "primaryText": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The primary text for the item"
      },
      "leftIcon": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Usually an <Icon /> or <Avatar />"
      },
      "active": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "`true` if the list item is currently selected"
      },
      "nestingDepth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The depth, in px, of nested items. Only applies if there are children\nListItems. The default is the Material Design spec value.",
        "defaultValue": {
          "value": "18 * gu",
          "computed": false
        }
      },
      "expanded": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Controls the expanded/collapses state if there are ListItem children"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Pass additional ListItems as children to make this ListItem nested\nand expandable."
      },
      "style": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "object"
            },
            {
              "name": "array"
            }
          ]
        },
        "required": false,
        "description": ""
      },
      "onPress": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": ""
      },
      "theme": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": ""
      }
    }
  },
  "../carbon-ui/src/components/NavigationDrawer.js": {
    "description": "The navigation drawer slides in from the left and contains the navigation\ndestinations for your app.",
    "methods": [],
    "props": {
      "open": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Will open the drawer if set to true.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "onOverlayPress": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback for when the overlay is pressed"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": ""
      }
    }
  },
  "../carbon-ui/src/components/Paper.js": {
    "description": "Generic Paper component. Like the <div /> of Material Design.",
    "methods": [],
    "props": {
      "elevation": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The elevation of the paper",
        "defaultValue": {
          "value": "2",
          "computed": false
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": ""
      },
      "style": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "object"
            },
            {
              "name": "array"
            }
          ]
        },
        "required": false,
        "description": ""
      },
      "css": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": ""
      }
    }
  },
  "../carbon-ui/src/components/TextField.js": {
    "description": "Text fields allow users to input text, select text, and lookup data via\nauto-completion.\n\nThis component wraps React Native's TextInput, so it accepts all the same\nprops.",
    "methods": [
      {
        "name": "styles",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The value of the TextField."
      },
      "placeholder": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The placeholder, for when the value is blank."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Will disabled the TextField if set to true.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "error": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The error to display under the TextField"
      },
      "singleLine": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Will make the TextField a single-line TextField, without a label.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "textInputStyle": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "object"
            },
            {
              "name": "array"
            }
          ]
        },
        "required": false,
        "description": "The style passed to the React Native TextInput"
      },
      "placeholderStyle": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "object"
            },
            {
              "name": "array"
            }
          ]
        },
        "required": false,
        "description": "The style passed to the placeholder."
      },
      "onChangeText": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Passed through to the underlying TextInput."
      },
      "theme": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": ""
      },
      "style": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "object"
            },
            {
              "name": "array"
            }
          ]
        },
        "required": false,
        "description": "The style of the containing View."
      }
    }
  },
  "../carbon-ui/src/components/TextFieldError.js": {
    "description": "Error component for the TextField.",
    "methods": [
      {
        "name": "show",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "text",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "hide",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "changeTo",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "text",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "styles",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": ""
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The error text. The height expands to show it."
      },
      "theme": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": ""
      }
    }
  },
  "../carbon-ui/src/components/TouchableRipple.js": {
    "description": "Ink ripples confirm user input by immediately expanding outward from the\npoint of touch. The card lifts to indicate an active state.",
    "methods": [
      {
        "name": "getLayout",
        "docblock": null,
        "modifiers": [
          "async"
        ],
        "params": [],
        "returns": null
      },
      {
        "name": "_handleLayout",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "measure",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "cb",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "touchableHandleActivePressIn",
        "docblock": "`Touchable.Mixin` self callbacks. The mixin will invoke these if they are\ndefined on your component.",
        "modifiers": [],
        "params": [
          {
            "name": "e"
          }
        ],
        "returns": null,
        "description": "`Touchable.Mixin` self callbacks. The mixin will invoke these if they are\ndefined on your component."
      },
      {
        "name": "touchableHandleActivePressOut",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "touchableHandlePress",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "touchableHandleLongPress",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "touchableGetPressRectOffset",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "touchableGetHitSlop",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "touchableGetHighlightDelayMS",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "touchableGetLongPressDelayMS",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "touchableGetPressOutDelayMS",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "_onKeyEnter",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          },
          {
            "name": "callback",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "_onKeyDown",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "_onKeyUp",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "_onKeyPress",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "start",
        "docblock": null,
        "modifiers": [
          "async"
        ],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "end",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "rippleColor": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The color of the ripple.",
        "defaultValue": {
          "value": "'black'",
          "computed": false
        }
      },
      "rippleSpread": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "How large the ripple gets. It's multipled by the diagonal length of the\nTouchableRipple.",
        "defaultValue": {
          "value": "1",
          "computed": false
        }
      },
      "rippleOpacity": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The opacity of the ripple",
        "defaultValue": {
          "value": "0.2",
          "computed": false
        }
      },
      "rippleDuration": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The duration of the ripple _and_ the ripple fade out, in ms. So multiply\nit by 2 to get the full duration.",
        "defaultValue": {
          "value": "300",
          "computed": false
        }
      },
      "rippleCentered": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Will center the ripple if set to true.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The contents of the ripple. Unlike other Touchables, doesn't need to be\na single element."
      },
      "style": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "object"
            },
            {
              "name": "array"
            }
          ]
        },
        "required": false,
        "description": ""
      }
    },
    "composes": [
      "react-native-universal"
    ]
  },
  "../carbon-ui/src/components/buttons/FlatButton.js": {
    "description": "Flat buttons are printed on material. They do not lift, but fill with color\non press.",
    "methods": [],
    "props": {
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Disables the button if set to true.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "The inside of the button. If it's text, it'll be UPPERCASEd."
      },
      "css": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": ""
      },
      "theme": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": ""
      }
    }
  },
  "../carbon-ui/src/components/buttons/IconToggle.js": {
    "description": "Icons are appropriate for toggle buttons that allow a single choice to be\nselected or deselected, such as adding or removing a star to an item.",
    "methods": [],
    "props": {
      "iconName": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "The name of the icon, from material icons: https://material.io/icons/"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "The style of the containing TouchableRipple (which is a View)"
      },
      "iconStyle": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "The style of the Icon element"
      }
    }
  },
  "../carbon-ui/src/components/buttons/RaisedButton.js": {
    "description": "Raised buttons behave like a piece of material resting on another sheet â€“\nthey lift and fill with color on press.",
    "methods": [],
    "props": {
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Disables the button if set to true."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The inside of the button. If it's text, it'll be UPPERCASEd."
      },
      "css": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": ""
      },
      "theme": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": ""
      }
    }
  }
}